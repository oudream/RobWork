SET(SUBSYS_NAME sdurw_python )
SET(SUBSYS_DESC "Interface for accessing RobWork from python." )
SET(SUBSYS_DEPS sdurw sdurw_algorithms)

SET(build TRUE)

FIND_PACKAGE(SWIG 3.0.0 QUIET)

set(DEFAULT TRUE)
set(REASON )
IF( NOT SWIG_FOUND)
    set(DEFAULT false)
    set(REASON "SWIG not found!")
else()

	# Prefer Python 3
	find_package(PythonInterp 3 QUIET)
	find_package(PythonLibs 3 QUIET)
	
	if (NOT PYTHONINTERP_FOUND)
	    find_package(PythonInterp QUIET)
	endif()
	if (NOT PythonLibs)
	    find_package(PythonLibs QUIET)
	endif()
	
	if(PYTHONINTERP_FOUND)
	    message(STATUS "Found Python interpreter ${PYTHON_VERSION_STRING}")
	endif()
	if(PYTHONLIBS_FOUND)
	    message(STATUS "Found Python libraries ${PYTHONLIBS_VERSION_STRING}")
	endif()

    if( NOT (PYTHONLIBS_FOUND AND PYTHONINTERP_FOUND) )
        set(DEFAULT false)
        set(REASON "PYTHONLIBS AND PYTHONINTERP not found!")
    endif()
endif()
 
RW_SUBSYS_OPTION( build ${SUBSYS_NAME} ${SUBSYS_DESC} ${DEFAULT} ${REASON})
RW_ADD_DOC( ${SUBSYS_NAME} )

IF( build )
    INCLUDE(UseSWIG)
    INCLUDE_DIRECTORIES(${PYTHON_INCLUDE_DIRS})
    set(SWIG_FLAGS "-includeall")
    if ((PYTHON_VERSION_MAJOR VERSION_GREATER 3) OR (PYTHON_VERSION_MAJOR VERSION_EQUAL 3))
        set(SWIG_FLAGS "${SWIG_FLAGS};-py3")
    endif() 
    if (NOT ${SWIG_VERSION} VERSION_LESS 4.0.0)
        set(SWIG_FLAGS "${SWIG_FLAGS};-doxygen")
    endif()
    SET(CMAKE_SWIG_OUTDIR ${RW_CMAKE_LIBRARY_OUTPUT_DIRECTORY})

    if(POLICY CMP0078)
        set(LIB_PREFIX "_")
    else()
        set(LIB_PREFIX "")
    endif()

    add_custom_target(${SUBSYS_NAME})
    foreach(RW_MODULE sdurw sdurw_assembly sdurw_control sdurw_pathoptimization sdurw_pathplanners sdurw_proximitystrategies sdurw_simulation sdurw_task)
        SET(RW_MODULE_FILENAME ../${RW_MODULE}.i)    

        SET_SOURCE_FILES_PROPERTIES(${RW_MODULE_FILENAME} PROPERTIES CPLUSPLUS ON)
        SET_SOURCE_FILES_PROPERTIES(${RW_MODULE_FILENAME} PROPERTIES SWIG_FLAGS "${SWIG_FLAGS}")

        IF ((CMAKE_VERSION VERSION_GREATER 3.8) OR (CMAKE_VERSION VERSION_EQUAL 3.8))
            SWIG_ADD_LIBRARY(${LIB_PREFIX}${RW_MODULE} TYPE SHARED LANGUAGE python SOURCES ${RW_MODULE_FILENAME} ../ScriptTypes.cpp)
            MESSAGE(STATUS "TARGET: ${LIB_PREFIX}${RW_MODULE}")
	    ELSE()
		    SWIG_ADD_MODULE(${RW_MODULE} python ${RW_MODULE_FILENAME} ../ScriptTypes.cpp)
	    ENDIF()
        if(POLICY CMP0078)
            set(TARGET_NAME ${LIB_PREFIX}${RW_MODULE})
        else()
            set(TARGET_NAME ${SWIG_MODULE_${RW_MODULE}_REAL_NAME})
        endif()
        IF((CMAKE_COMPILER_IS_GNUCC) OR (CMAKE_C_COMPILER_ID STREQUAL "Clang"))
          SET_TARGET_PROPERTIES(${TARGET_NAME} PROPERTIES LINK_FLAGS -Wl,--no-undefined)
        ENDIF()
        add_dependencies(${SUBSYS_NAME} ${TARGET_NAME})

        if (NOT ${SWIG_VERSION} VERSION_LESS 4.0.0)
            find_program(pydoc pydoc3)
            if (NOT pydoc)
                find_program(pydoc pydoc)
            endif()
            if (pydoc)
                add_custom_command(TARGET ${TARGET_NAME}
                    POST_BUILD
                    COMMAND ${pydoc} -w ${RW_MODULE}
                    WORKING_DIRECTORY ${RW_CMAKE_LIBRARY_OUTPUT_DIRECTORY}
                    COMMENT "Creating pydoc..."
                )
            endif()
        endif()
    endforeach()

    SWIG_LINK_LIBRARIES(${LIB_PREFIX}sdurw sdurw ${PYTHON_LIBRARIES})
    SWIG_LINK_LIBRARIES(${LIB_PREFIX}sdurw_assembly sdurw_assembly sdurw ${PYTHON_LIBRARIES})
    SWIG_LINK_LIBRARIES(${LIB_PREFIX}sdurw_control sdurw_control sdurw ${PYTHON_LIBRARIES})
    SWIG_LINK_LIBRARIES(${LIB_PREFIX}sdurw_pathoptimization sdurw_pathoptimization sdurw ${PYTHON_LIBRARIES})
    SWIG_LINK_LIBRARIES(${LIB_PREFIX}sdurw_pathplanners sdurw_pathplanners sdurw ${PYTHON_LIBRARIES})
    SWIG_LINK_LIBRARIES(${LIB_PREFIX}sdurw_proximitystrategies sdurw_proximitystrategies sdurw ${PYTHON_LIBRARIES})
    SWIG_LINK_LIBRARIES(${LIB_PREFIX}sdurw_simulation sdurw_simulation sdurw ${PYTHON_LIBRARIES})
    SWIG_LINK_LIBRARIES(${LIB_PREFIX}sdurw_task sdurw_task sdurw ${PYTHON_LIBRARIES})

    SET(LIB_PREFIX "_")
    add_dependencies(${LIB_PREFIX}sdurw_assembly ${LIB_PREFIX}sdurw_task ${LIB_PREFIX}sdurw)
    add_dependencies(${LIB_PREFIX}sdurw_control ${LIB_PREFIX}sdurw)
    add_dependencies(${LIB_PREFIX}sdurw_pathoptimization ${LIB_PREFIX}sdurw)
    add_dependencies(${LIB_PREFIX}sdurw_pathplanners ${LIB_PREFIX}sdurw)
    add_dependencies(${LIB_PREFIX}sdurw_proximitystrategies ${LIB_PREFIX}sdurw)
    add_dependencies(${LIB_PREFIX}sdurw_simulation ${LIB_PREFIX}sdurw)
    add_dependencies(${LIB_PREFIX}sdurw_task ${LIB_PREFIX}sdurw)
ENDIF()
